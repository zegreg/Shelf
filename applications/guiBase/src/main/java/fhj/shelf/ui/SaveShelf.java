package fhj.shelf.ui;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingWorker;


import fhj.shelf.actionWindow.HandlerPost;
import fhj.shelf.actionWindow.PostActionWindow;

import fhj.shelf.actionWindowFactory.PostActionWindowFactory;

import fhj.shelf.factorys.CommandFactory;
import fhj.shelf.factorys.CommandPostFactoryWithParameters;
import java.awt.SystemColor;



/**
 * 
 * Class whose instance gives a User Interface Representation of the domain
 * Class {@code CreateShelf()}
 *
 * @author Filipa Estiveira, Hugo Leal, José Oliveira
 */

@SuppressWarnings("serial")
public class SaveShelf extends JFrame implements PostActionWindow{

	
	public static class Factory implements PostActionWindowFactory {

		/**
		 * This is the constructor for the class above, it defines the factory
		 * 
		 * @param userRepo
		 *            is an instance of UserRepository
		 * @param shelfRepo
		 *            is an instance of ShelfRepository
		 */
		public Factory() {

		}

		/**
		 * This is an override method of the base class, it returns a new
		 * instance of SaveUser
		 */
		
		@Override
		public PostActionWindow newInstance(String username, String password, Map<String, CommandFactory> mapCommands) {
			return new SaveShelf(username, password,mapCommands);
		}
	}
	
	
	
	
	
	
	private static final int JLND_HEIGHT = 20;
	private static final int JLND_WIDTH = 78;
	private static final int CPL_VERTICALGAP = 5;
	private static final int CPL_HORIZONTALGAP = 5;
	private static final int JLVD_HEIGHT = 10;
	private static final int JLVD_WIDTH = 325;
	private static final int LOCATION_Y = 100;
	private static final int LOCATION_X = 100;
	private static final int SIZE_HEIGHT = 157;
	private static final int SIZE_WIDTH = 350;
	private static final int JTFNB_COLUMNS = 4;
	/**
	 * Attributes
	 * 
	 */
	private static JLabel jlName;
	private static JTextField jtfnbElments;
	private static JButton jbSave;
	private static JButton jbDelete;
	private static JLabel jlVazia;

	Map<String, CommandFactory> shelfCommands;
	private String username;
	private String password;
	/**
	 * Constructor
	 * 
	 * @param repository
	 * @param shelfRepository
	 */
	public SaveShelf(String username, String password,Map<String, CommandFactory> shelfCommands) {
		getContentPane().setBackground(SystemColor.inactiveCaption);
		this.username = username;
		this.password = password;
		this.shelfCommands = shelfCommands;

		jlName = new JLabel("Shelf Capacity");
		jlName.setBounds(69, 20, 115, 20);
		jtfnbElments = new JTextField(JTFNB_COLUMNS);
		jtfnbElments.setBounds(169, 20, 38, 20);
		jbSave = new JButton("Save");
		jbSave.setBounds(69, 76, 57, 23);
		jbDelete = new JButton("Delete");
		jbDelete.setBounds(169, 76, 63, 23);
		jlVazia = new JLabel("");
		jlVazia.setBounds(5, 30, 325, 10);
		jlVazia.setBackground(SystemColor.inactiveCaption);

		// Sets window properties
		setTitle("New Shelf");
		setSize(300, 157);
		setLocation(LOCATION_X, LOCATION_Y);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

		// Set the size of the labels
		setVisible(true);
		jlVazia.setPreferredSize(new Dimension(JLVD_WIDTH, JLVD_HEIGHT));
		getContentPane().setLayout(null);
		jlName.setPreferredSize(new Dimension(JLND_WIDTH, JLND_HEIGHT));

		// Adds components to the window
		getContentPane().add(jlName);
		getContentPane().add(jtfnbElments);
		getContentPane().add(jlVazia);
		getContentPane().add(jbSave);
		getContentPane().add(jbDelete);

		/*
		 * ActionListener listener registration in the button Save and button
		 * Delete.          When an event is generated by this component, is
		 *          created an instance of the inner class EventShelfSearch()
		 * and EventShelfDelete()
		 */
		jbSave.addActionListener(new EventShelfSave());
		jbDelete.addActionListener(new EventShelfDelete());
	}


	public JTextField getjtfnbElements() {
		return jtfnbElments;
	}

	/**
	 * Inner class that contains the code that is executed when it is press the
	 * button jbSave This Class implements ActionListener Interface, and invoke
	 * actionPerformed method. The action is made in an Background Thread, by
	 * run SwingWorker framework by execute a EventHandling() object.
	 * 
	 */
	private class EventShelfSave implements ActionListener 
	{
		private Map<String, String> params;
		
		public EventShelfSave() {
			params = new HashMap<String, String>();
		}
		
		public void actionPerformed(ActionEvent ev) 
		{

			if (jtfnbElments.getText().equals(""))
				JOptionPane.showMessageDialog(null, "All fields are required!");
			
			
			else 
			{		Map<String, String> params = new HashMap<String, String>();
					
					params.put("loginName", username);
					params.put("loginPassword", password);
					
					params.put("nbElements", getjtfnbElements().getText());

					

					try {
						HandlerPost.PostUserInformation(params, shelfCommands, "postShelf");
						dispose();
//						cleanFields();
					} catch (IOException e1) {
					
						e1.printStackTrace();
					};
					
					
					
//					PostShelfInformation(params);

				
			}
		}
	}


	/**
	 * Method to clean all fields in JTextField
	 */
	private void deleteFields() {
		jtfnbElments.setText("");

	}

	/**
	 * Inner class that contains the code that is executed when it is pressed
	 * the jbDelete button.
	 * 
	 */
	private class EventShelfDelete implements ActionListener {

		public void actionPerformed(ActionEvent ev) {
			deleteFields();
		}
	}

}
	
