package fhj.shelf.ui;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JButton;

import java.awt.FlowLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.Dimension;


import javax.swing.JOptionPane;

import fhj.shelf.actionwindow.HandlerPost;
import fhj.shelf.actionwindow.PostActionWindow;
import fhj.shelf.actionwindowfactory.PostActionWindowFactory;
import fhj.shelf.factorys.CommandFactory;

import java.awt.SystemColor;

/**
 * 
 * Class whose instance gives a User Interface Representation of the domain
 * Class {@code EditUser()}
 *
 * @author Filipa Estiveira, Hugo Leal, José Oliveira
 */
@SuppressWarnings("serial")
public class PatchUser extends JFrame implements PostActionWindow {

	/**
	 * 
	 * Class that a single instance of UserRepositorySwing class. Implements
	 * PostActionWindowFactory and returns a PostActionWindow
	 *
	 */
	public static class Factory implements PostActionWindowFactory {

		/**
		 * This is the constructor for the class above, it defines the factory
		 * 
		 */
		public Factory() {

		}

		/**
		 * This is an override method of the base class, it returns a new
		 * instance of PatchUser
		 */

		@Override
		public PostActionWindow newInstance(String username, String password,
				Map<String, CommandFactory> mapCommands) {
			return new PatchUser(username, password, mapCommands);
		}
	}

	private static final int JLED_HEIGHT = 10;
	private static final int JLED_WIDTH = 325;
	private static final int JLNPD_HEIGHT = 20;
	private static final int JLNPD_WIDTH = 65;
	private static final int JLPD_HEIGHT = 20;
	private static final int JLPD_WIDTH = 65;
	private static final int JLUD_HEIGHT = 20;
	private static final int JLUD_WIDTH = 65;
	private static final int LOCATION_Y = 100;
	private static final int LOCATION_X = 100;
	private static final int JTFNP_COLUMNS = 20;
	private static final int JTFOP_COLUMNS = 20;
	private static final int JTF_COLUMNS = 20;
	/**
	 * Declares and creates components
	 */
	private JTextField jtfName, jtfNewPassword, jtfOldPassword;
	private JLabel jlUsername, jlPassword, jlNewPassword, jlEmpty;
	private JButton jbSaveChange;

	Map<String, CommandFactory> userCommands;
	private String username;
	private String password;

	/**
	 * Constructor
	 * 
	 * @param mapCommands
	 */
	public PatchUser(String username, String password,
			Map<String, CommandFactory> mapCommands) {
		getContentPane().setBackground(SystemColor.inactiveCaption);
		this.username = username;
		this.password = password;
		this.userCommands = mapCommands;

		jlUsername = new JLabel("Username");
		jtfName = new JTextField(JTF_COLUMNS);
		jlPassword = new JLabel("OldPassword");
		jtfOldPassword = new JTextField(JTFOP_COLUMNS);
		jlNewPassword = new JLabel("NewPassword");
		jtfNewPassword = new JTextField(JTFNP_COLUMNS);
		jbSaveChange = new JButton("Save");
		jlEmpty = new JLabel("");

		/** Sets window properties */
		setTitle("New User");
		setSize(380, 205);
		setLocation(LOCATION_X, LOCATION_Y);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(new FlowLayout());
		setVisible(true);

		/** Sets the size of the labels */
		jlUsername.setPreferredSize(new Dimension(JLUD_WIDTH, JLUD_HEIGHT));
		jlPassword.setPreferredSize(new Dimension(JLPD_WIDTH, JLPD_HEIGHT));
		jlNewPassword
				.setPreferredSize(new Dimension(JLNPD_WIDTH, JLNPD_HEIGHT));
		jlEmpty.setPreferredSize(new Dimension(JLED_WIDTH, JLED_HEIGHT));

		/** Adds components to the window */
		getContentPane().add(jlUsername);
		getContentPane().add(jtfName);
		getContentPane().add(jlPassword);
		getContentPane().add(jtfOldPassword);
		getContentPane().add(jlNewPassword);
		getContentPane().add(jtfNewPassword);
		getContentPane().add(jlEmpty);
		getContentPane().add(jbSaveChange);

		/**
		 * Registration ActionListener listener with the buttons. When an event
		 * is generated by these components, is created an instance of
		 * EventModelExecuter, where is the code that should be executed when
		 * this happens
		 */
		jbSaveChange.addActionListener(new EventModelExecuter());
	}

	/**
	 * Inner class that contains the code that is executed when you press the
	 * button jbSaveChange
	 * 
	 * @author José Oliveira
	 *
	 */
	private class EventModelExecuter implements ActionListener {

		public void actionPerformed(ActionEvent ev) {

			if (ev.getSource() == jbSaveChange) {

				if (jtfName.getText().equals("")
						|| jtfOldPassword.getText().equals("")
						|| jtfNewPassword.getText().equals(""))
					JOptionPane.showMessageDialog(null,
							"All fields are required!");
				else {
					try {

						Map<String, String> map = new TreeMap<String, String>();
						map.put("loginName", username);
						map.put("loginPassword", password);
						map.put("oldPassword", jtfOldPassword.getText());
						map.put("newPassword", jtfNewPassword.getText());

						HandlerPost.PostUserInformation(map, userCommands,
								"patchUser");
						dispose();
						cleanFields();
					} catch (Exception e1) {

						Logger.getLogger(PatchUser.class.getName()).log(
								Level.WARNING,
								" IOException  Occured : HandlerPost ", e1);

					}
				}

			}

		}

		/**
		 * Method to put field empty
		 */
		private void cleanFields() {
			jtfName.setText("");
			jtfOldPassword.setText("");
			jtfNewPassword.setText("");

		}
	}
}
