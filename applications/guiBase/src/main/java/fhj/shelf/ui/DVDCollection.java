package fhj.shelf.ui;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Map;
import java.util.TreeMap;
import java.util.Map.Entry;
import java.util.concurrent.ExecutionException;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.SwingWorker;

import fhj.shelf.actionWindow.HandlerPost;
import fhj.shelf.actionWindow.PostActionWindow;
import fhj.shelf.actionWindowFactory.PostActionWindowFactory;
import fhj.shelf.factorys.CommandFactory;
import fhj.shelf.factorys.CommandGetFactoryWithoutParameters;
import java.awt.SystemColor;


@SuppressWarnings("serial")
public class DVDCollection extends JFrame implements PostActionWindow {

	/**
	 * 
	 * Class that a single instance of UserRepositorySwing class. Implements
	 * PostActionWindowFactory and returns a PostActionWindow
	 *
	 */
	public static class Factory implements PostActionWindowFactory {

		/**
		 * This is the constructor for the class above, it defines the factory
		 * 
		 */
		public Factory() {

		}

		/**
		 * This is an override method of the base class, it returns a new
		 * instance of DVDCollection
		 */
		
		@Override
		public PostActionWindow newInstance(String username, String password, Map<String, CommandFactory> mapCommands) {
			return new DVDCollection(username, password,mapCommands);
		}
	}
	
	
	
	
	
	
	
	
	
	/**
	 * Declarations
	 */

	private JLabel jlElementType;
	private JLabel jlTitle;
	private JTextField jtfTitle;
	private JComboBox<Object> comboBox;
	private final JButton btnAddDVDCollection;
	private final JButton btnDelete;
	private Map<String, CommandFactory> shelfCommands;
	private String username;
	private String password;

	/**
	 * Constructor
	 * 
	 * @param shelfRepository
	 * @param elementsRepository
	 */
	public DVDCollection(String username, String password,Map<String, CommandFactory> shelfCommands) {
		getContentPane().setBackground(SystemColor.inactiveCaption);
		this.username = username;
		this.password = password;
this.shelfCommands = shelfCommands;

		btnAddDVDCollection = new JButton("AddDVDCollection");
		btnDelete = new JButton("Delete");
		comboBox = new JComboBox<Object>();
		jtfTitle = new JTextField(6);
		jlTitle = new JLabel("Title");
		jlElementType = new JLabel("ShelfId");
		comboBox.setBounds(101, 31, 109, 24);

		SwingWorker<?, ?> worker = fillComboxFromMap();
		worker.execute();
		/* Adding containers and components to Frame */
		createContentPanel();

		/*
		 * ActionListener listener registration in the button Save and button
		 * Delete.          When an event is generated by this component, is
		 *          created an instance of the inner class EventDVDCollection()
		 */
		btnAddDVDCollection.addActionListener(new EventDVDCollection());
	}

	/**
	 * Method with responsability to fill JCombox with ShelfRespository. Creates
	 * a SwingWorker object and implements anonymous class
	 * 
	 * @return
	 */
	private SwingWorker<?, ?> fillComboxFromMap() {
		SwingWorker<Map<String, String>, Void> worker = new SwingWorker<Map<String, String>, Void>() {
			@Override
			protected Map<String, String> doInBackground()
					throws Exception {
				
				CommandGetFactoryWithoutParameters getShelfs =  (CommandGetFactoryWithoutParameters) shelfCommands.get("getShelfs");
				return getShelfs.newInstance().execute();
			}

			@Override
			protected void done() {

				try {

					for (Entry<String, String> iterable_element : get().entrySet()) {

						comboBox.addItem(iterable_element.getKey().split("=")[1]);

					
					}
				} catch (InterruptedException e) {

					e.printStackTrace();
				} catch (ExecutionException e) {

					e.printStackTrace();
				}

			}
		};
		return worker;
	}

	/**
	 * Method to create a Panel
	 */
	private void createContentPanel() {

		setTitle("AddShelfElement");
		setSize(500, 330);
		setLocation(100, 100);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setVisible(true);
		getContentPane().setLayout(null);

		jlElementType.setBounds(21, 28, 96, 31);
		jlTitle.setBounds(21, 89, 42, 18);
		jtfTitle.setBounds(100, 88, 292, 19);
		btnAddDVDCollection.setBounds(100, 192, 140, 31);
		btnDelete.setBounds(277, 192, 115, 31);

		// Adiciona os componentes à janela
		getContentPane().add(comboBox);
		getContentPane().add(jlElementType);
		getContentPane().add(jlTitle);
		getContentPane().add(jtfTitle);
		getContentPane().add(btnAddDVDCollection);
		getContentPane().add(btnDelete);

	}

	/**
	 * 
	 * This Inner Class implements ActionListener. Creates an Element Shelf by a
	 * background thread with SwingWorker Framework.
	 *
	 */
	private class EventDVDCollection implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			Map<String, String> params = new TreeMap<String, String>();
			params.put("loginName", username);
			params.put("loginPassword", password);
			params.put("name", jtfTitle.getText());
			params.put("id", comboBox.getSelectedItem().toString());
			params.put("type", "DVDCollection");
			
			

			try {
				HandlerPost.PostUserInformation(params, shelfCommands, "postElement");
				dispose();
				cleanFields();
			} catch (IOException e1) {
			
				e1.printStackTrace();
			};
			
			}

	}

	private void cleanFields() {
		jtfTitle.setText("");

	}
}
