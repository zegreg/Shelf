package fhj.shelf.UI;


import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.SwingWorker;

import java.awt.HeadlessException;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.concurrent.ExecutionException;
import java.awt.Dimension;

import javax.swing.JOptionPane;

import fhj.shelf.commandsDomain.GetOneUser;
import fhj.shelf.utils.repos.User;
import fhj.shelf.utils.repos.UserRepository;

/**
 * 
 * Class whose instance gives a User Interface Representation of the domain Class {@code GetOneUser()} 
 *@author Filipa Estiveira, Hugo Leal, José Oliveira
 */
@SuppressWarnings("serial")
public class SearchUser extends JFrame {

	/**
	 * Attributes  
	 */
	private static JLabel jlNome;
	private static JTextField jtfNome;
	private static JLabel jlPassword;
	private static JTextField jtfPassword;
	private static JLabel jlFullname;
	private static JTextField jtfFullname;
	private static JLabel jlEmail;
	private static JTextField jtfEmail;
	private static JButton jbSearch;
	private static  JLabel jlVazia;
	private  UserRepository repository;
	private static JButton jbPatch;


	/**
	 * Constructor
	 * @param repository
	 */
	public SearchUser(UserRepository repository) {    
		this.repository = repository;

		jlNome = new JLabel ("Nome: ");
		jtfNome = new JTextField(20);
		jlPassword = new JLabel ("Password: ");
		jtfPassword = new JTextField(20);
		jlFullname = new JLabel ("Fullname: ");
		jtfFullname = new JTextField(20);
		jlEmail = new JLabel ("E-mail: ");
		jtfEmail = new JTextField(20);
		jbSearch = new JButton("Search");
		jlVazia = new JLabel("");
		
		//Sets window properties
		setTitle("Procura por nome");
		setSize(350,234);
		setLocation(100,100);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setVisible(true);
		jlNome.setBounds(14, 23, 65, 20);

		// Set the size of the labels
		jlNome.setPreferredSize(new Dimension(65,20));
		jlPassword.setBounds(14, 54, 65, 20);
		jlPassword.setPreferredSize(new Dimension(65,20));
		jlFullname.setBounds(14, 85, 65, 20);
		jlFullname.setPreferredSize(new Dimension(65,20));
		jlEmail.setBounds(15, 116, 65, 20);
		jlEmail.setPreferredSize(new Dimension(65,20));
		jlVazia.setBounds(5, 105, 325, 10);
		jlVazia.setPreferredSize(new Dimension(325,10));

		/*Sets the text boxes as non-editable,
         since it is not necessary to enter data in these fields*/
		jtfPassword.setBounds(84, 54, 166, 20);
		jtfPassword.setEditable(false);
		jtfFullname.setBounds(84, 85, 166, 20);
		jtfFullname.setEditable(false);
		jtfEmail.setBounds(84, 116, 166, 20);
		jtfEmail.setEditable(false);
		getContentPane().setLayout(null);

		//Adds components to the window
		getContentPane().add(jlNome);
		jtfNome.setBounds(84, 23, 166, 20);
		getContentPane().add(jtfNome);
		getContentPane().add(jlPassword);
		getContentPane().add(jtfPassword);
		getContentPane().add(jlFullname);
		getContentPane().add(jtfFullname);
		getContentPane().add(jlEmail);
		getContentPane().add(jtfEmail);
		getContentPane().add(jlVazia);
		jbSearch.setBounds(131, 147, 73, 23);
		getContentPane().add(jbSearch);

		/*ActionListener listener registration  in the button Search .
         When an event is generated by this component, is
         created an instance of the inner class EventSearch()*/
		jbSearch.addActionListener(new EventSearch());
		

	}
	

	/**
	  * Inner Class that implements ActionListener Interface, and invoke
	 * actionPerformed method for Search Button. The action is made in an Background Thread, by
	 * run SwingWorker framework.
	 */
	private class EventSearch implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {

			class EventHandling extends SwingWorker<User, Object> {
			
				@Override
				protected User doInBackground() throws Exception {

					User user = (User) new GetOneUser(repository,
							jtfNome.getText()).call();

					return user;
				}

				@Override
				protected void done() {

					try {

						jtfPassword.setText(String.valueOf(((User) get())
								.getLoginPassword()));
						jtfFullname.setText(String.valueOf(((User) get())
								.getFullName()));
						jtfEmail.setText(String.valueOf(((User) get())
								.getEmail()));

					} catch (HeadlessException e) {
						e.printStackTrace();
					} catch (InterruptedException e) {
						e.printStackTrace();
					} catch (ExecutionException e) {
						e.printStackTrace();
					} catch (NullPointerException e) {
						JOptionPane.showMessageDialog(null,
								"No user with this name was found!"
										+ e);
					     	e.printStackTrace();
							cleanFields();
					}

				}
			}
			new EventHandling().execute();

		}
	}
	
	/**
	 * Method to clean all fields in JTextField
	 */
	private void cleanFields() {
		jtfNome.setText("");
		jtfPassword.setText("");
		jtfFullname.setText("");
		jtfEmail.setText("");
	}
}


       


